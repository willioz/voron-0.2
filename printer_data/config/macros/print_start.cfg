
[gcode_macro PRINT_START]
description: Machine heatup procedure before starting a print
variable_bed_temp: 0
variable_extruder_temp: 0
variable_z_adjust: 0
variable_soak: 0
variable_chamber_temp: 0
variable_chamber_maxtime: 0
variable_initial_tool: 0
variable_check_gates: 0
variable_tools_used: ""
variable_sync_mmu_extruder: 0
variable_material: "XXX"
variable_fl_size: "0_0_0_0"
variable_bed_mesh_profile: ""
variable_total_layer: 0
variable_adaptive_primeline: 1
gcode:
# Get all the parameters passed from the slicer
    {% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES"].print_default_bed_temp)|float %} # Bed temperature
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES"].print_default_extruder_temp)|float %} # Extruder temperature
    {% set Z_ADJUST = params.Z_ADJUST|default(0)|float %}  # Optionnal Z adjustement from the slicer profile (ex. use it if you have textured vs smooth slicer profiles) 
    {% set SOAK = params.SOAK|default(printer["gcode_macro _USER_VARIABLES"].print_default_soak)|int %} # Heatsoak time of the bed in minutes
    {% set CHAMBER_TEMP = params.CHAMBER|default(printer["gcode_macro _USER_VARIABLES"].print_default_chamber_temp)|int %} # Chamber temperature setpoint
    {% set CHAMBER_MAXTIME = params.CHAMBER_MAXTIME|default(printer["gcode_macro _USER_VARIABLES"].print_default_chamber_max_heating_time)|int %} # Chamber heatsoak timeout in minutes
    {% set INITIAL_TOOL = params.INITIAL_TOOL|default(0)|int %} # Initial tool (for the MMU/ERCF initialization)
    {% set MATERIAL = params.MATERIAL|default(printer["gcode_macro _USER_VARIABLES"].print_default_material)|string %} # Material type set in the slicer
    {% set FL_SIZE = params.SIZE|default("0_0_0_0")|string %} # Get bounding box of the first layer for the adaptive bed mesh
    {% set CHECK_GATES = params.CHECK_GATES|default(printer['gcode_macro _USER_VARIABLES'].mmu_check_gates_on_PRINT_START)|default(0)|int %} # Check if MMU gates are availables
    {% set TOOLS_USED = params.TOOLS_USED|default("")|string %} # Check if MMU gates (used in gcode file) are availables
    {% set SYNC_MMU_EXTRUDER = params.SYNC_MMU_EXTRUDER|default(0)|int %} # set MMU gear motor and extruder synchronization during print TODO
    {% set BED_MESH_PROFILE = params.MESH|default("")|string %} # Bed mesh profile to load
    {% set ADAPTIVE_PRIMELINE = params.ADAPTIVE_PRIMELINE|default(1)|int %} # Weither to do or not an adaptive prime line near the real print zone

    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=bed_temp VALUE={BED_TEMP}
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=extruder_temp VALUE={EXTRUDER_TEMP}
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=soak VALUE={SOAK}
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=chamber_temp VALUE={CHAMBER_TEMP}
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=chamber_maxtime VALUE={CHAMBER_MAXTIME}
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=initial_tool VALUE={INITIAL_TOOL}
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=check_gates VALUE={CHECK_GATES}
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=tools_used VALUE='"{TOOLS_USED}"'
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=sync_mmu_extruder VALUE={SYNC_MMU_EXTRUDER}
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=material VALUE='"{MATERIAL}"'
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=fl_size VALUE='"{FL_SIZE}"'
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=bed_mesh_profile VALUE='"{BED_MESH_PROFILE}"'
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=adaptive_primeline VALUE={ADAPTIVE_PRIMELINE}

    {% if params.TOTAL_LAYER %} # total layers count (if provided by the slicer)
        SET_PRINT_STATS_INFO TOTAL_LAYER={params.TOTAL_LAYER|int}
        SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=total_layer VALUE={params.TOTAL_LAYER|int}
    {% endif %}

    # Get all the config options and configurations for this macro
    {% set verbose = printer["gcode_macro _USER_VARIABLES"].verbose %}
    {% set light_enabled = printer["gcode_macro _USER_VARIABLES"].light_enabled %}
    {% set light_intensity_PRINT_START = printer["gcode_macro _USER_VARIABLES"].light_intensity_PRINT_START %}
    {% set light_intensity_printing = printer["gcode_macro _USER_VARIABLES"].light_intensity_printing %}
    {% set status_leds_enabled = printer["gcode_macro _USER_VARIABLES"].status_leds_enabled %}
    {% set force_homing_in_PRINT_START = printer["gcode_macro _USER_VARIABLES"].force_homing_in_PRINT_START %}
    {% set klippain_mmu_enabled = printer["gcode_macro _USER_VARIABLES"].klippain_mmu_enabled %}
    {% set bed_mesh_enabled = printer["gcode_macro _USER_VARIABLES"].bed_mesh_enabled %}
    {% set firmware_retraction_enabled = printer["gcode_macro _USER_VARIABLES"].firmware_retraction_enabled %}
    {% set filter_enabled = printer["gcode_macro _USER_VARIABLES"].filter_enabled %}
    {% set filament_sensor_enabled = printer["gcode_macro _USER_VARIABLES"].filament_sensor_enabled %}
    {% set part_fan_tach_enabled = printer["gcode_macro _USER_VARIABLES"].part_fan_tach_enabled %}
    {% set hotend_fan_tach_enabled = printer["gcode_macro _USER_VARIABLES"].hotend_fan_tach_enabled %}

    {% if MATERIAL not in printer["gcode_macro _USER_VARIABLES"].material_parameters %}
        RESPOND MSG="Material '{MATERIAL}' is unknown!"
        { action_raise_error("Add this new material to your material_parameters variable!") }
    {% else %}
        RESPOND MSG="Material '{MATERIAL}' is used"
        {% set material = printer["gcode_macro _USER_VARIABLES"].material_parameters[MATERIAL] %}
    {% endif %}


    # --------------------------------
    # Let's do the PRINT_START actions
    # --------------------------------
    {% if status_leds_enabled %}
        STATUS_LEDS COLOR="BUSY"
    {% endif %}

    {% if light_enabled %}
        LIGHT_ON S={light_intensity_PRINT_START}
    {% endif %}

    CLEAR_PAUSE

    {% if bed_mesh_enabled %}
        BED_MESH_CLEAR
    {% endif %}

    # If a filter is enabled and already running due to a print that just finished, we stop
    # it now and deactivate the pending delayed gcode that could be running. The filter
    # could be restarted later in the PRINT_START sequence depending of the parameters
    {% if filter_enabled %}
        UPDATE_DELAYED_GCODE ID=_STOP_FILTER_DELAYED DURATION=0
        STOP_FILTER
    {% endif %}

    SET_GCODE_OFFSET Z=0
    _CG28
    M221 S100
    M220 S100
    G90
    M83

     # Material parameters
    {% if firmware_retraction_enabled %}
        SET_RETRACTION RETRACT_LENGTH={material.retract_length} RETRACT_SPEED={material.retract_speed} UNRETRACT_EXTRA_LENGTH={material.unretract_extra_length} UNRETRACT_SPEED={material.unretract_speed}
    {% endif %}
    SET_PRESSURE_ADVANCE ADVANCE={material.pressure_advance}

    _MODULE_HEATSOAK_BED
    _MODULE_EXTRUDER_HEATING
    _MODULE_CLEAN
    _MODULE_BED_MESH
    _MODULE_PRIMELINE

    SET_GCODE_OFFSET Z_ADJUST={Z_ADJUST} MOVE=1

    # Final material parameters
    SET_GCODE_OFFSET Z_ADJUST={material.additional_z_offset} MOVE=1
    {% if filter_enabled %}
        START_FILTER SPEED={material.filter_speed / 100}
    {% endif %}

    {% if filament_sensor_enabled and not material.filament_sensor %}
        SET_FILAMENT_SENSOR SENSOR="runout_sensor" ENABLE=0
    {% endif %}

    # And.... Goooo!
    {% if status_leds_enabled %}
        STATUS_LEDS COLOR="PRINTING"
    {% endif %}

    {% if light_enabled %}
        LIGHT_ON S={light_intensity_printing}
    {% endif %}

    {% if klippain_mmu_enabled %}
        {% if printer.mmu.enabled and printer.mmu.print_start_detection|int == 0 %}
            _MMU_PRINT_START
        {% endif %}
    {% endif %}

    {% if verbose %}
        RESPOND MSG="Start printing !"
    {% endif %}

    G92 E0.0



[gcode_macro _MODULE_PRIMELINE]
gcode:
    # ----- PRIME LINE -------------------------------------------
    {% set FL_SIZE = printer["gcode_macro PRINT_START"].fl_size %}
    {% set ADAPTIVE_PRIMELINE = printer["gcode_macro PRINT_START"].adaptive_primeline %}
    {% set verbose = printer["gcode_macro _USER_VARIABLES"].verbose %}

    {% if verbose %}
        RESPOND MSG="Executing a primeline..."
    {% endif %}
    PRIMELINE SIZE={FL_SIZE} ADAPTIVE_MODE={ADAPTIVE_PRIMELINE}


[gcode_macro _MODULE_HEATSOAK_BED]
gcode:
    # ----- BED HEATSOAK -------------------------------------
    # Heatsoak the bed if SOAK time is set and bed is not already warming up to the correct temperature (+-8Â°C).
    # We make the assumption that the soak is not needed if the bed is already at the correct target.
    # We also use the recirculating filter under the bed (if available) at full power to spread the heat
    # during the heatsoak if a specific temperature need to be reached.
    {% set BED_TEMP = printer["gcode_macro PRINT_START"].bed_temp %}
    {% set SOAK = printer["gcode_macro PRINT_START"].soak %}
    {% set CHAMBER_TEMP = printer["gcode_macro PRINT_START"].chamber_temp %}

    {% set status_leds_enabled = printer["gcode_macro _USER_VARIABLES"].status_leds_enabled %}
    {% set filter_enabled = printer["gcode_macro _USER_VARIABLES"].filter_enabled %}

    {% set St = printer["gcode_macro _USER_VARIABLES"].travel_speed * 60 %}

    {% set max_x = printer.toolhead.axis_maximum.x|float %}
    {% set max_y = printer.toolhead.axis_maximum.y|float %}

    {% if status_leds_enabled %}
        STATUS_LEDS COLOR="HEATING"
    {% endif %}

    {% if printer.heater_bed.temperature < (BED_TEMP - 8) %}
        # If the machine is equiped by a chamber temperature sensor and a recirculating filter (check is automatic under the hood),
        # then we look if a specific chamber temperature is needed and we power on the recirculating filter to spread the heat
        {% if (CHAMBER_TEMP > 0) and filter_enabled %}
            START_FILTER SPEED=1
        {% endif %}

        # If we need a full soak (not 0 min), then move the toolhead to the center front to spread the heat using the hotend fan
        {% if SOAK > 0 %}
            G0 X{max_x|int / 2} Y{max_y|int / 3} Z50 F{St}
        {% endif %}
    
        # Put the bed temperature target and wait for the soak
        HEATSOAK_BED TEMP={BED_TEMP} SOAKTIME={SOAK}
    {% else %}
        HEATSOAK_BED TEMP={BED_TEMP} SOAKTIME=0
    {% endif %}



[gcode_macro _MODULE_EXTRUDER_HEATING]
gcode:
    # ----- EXTRUDER HEATING ---------------------------------
    # Heat the nozzle to print temperature ontop of the purge bucket (if available) or in the middle of the bed
    {% set EXTRUDER_TEMP = printer["gcode_macro PRINT_START"].extruder_temp %}
    {% set INITIAL_TOOL = printer["gcode_macro PRINT_START"].initial_tool %}

    {% set verbose = printer["gcode_macro _USER_VARIABLES"].verbose %}
    {% set status_leds_enabled = printer["gcode_macro _USER_VARIABLES"].status_leds_enabled %}
    {% set klippain_mmu_enabled = printer["gcode_macro _USER_VARIABLES"].klippain_mmu_enabled %}
    {% set purge_and_brush_enabled = printer["gcode_macro _USER_VARIABLES"].purge_and_brush_enabled %}
    {% set purgeclean_servo_enabled = printer["gcode_macro _USER_VARIABLES"].purgeclean_servo_enabled %}

    {% set St = printer["gcode_macro _USER_VARIABLES"].travel_speed * 60 %}
    {% set Px, Py, Pz = printer["gcode_macro _USER_VARIABLES"].purge_bucket_xyz|map('float') %}

    {% set max_x = printer.toolhead.axis_maximum.x|float %}
    {% set max_y = printer.toolhead.axis_maximum.y|float %}

    {% if status_leds_enabled %}
        STATUS_LEDS COLOR="HEATING"
    {% endif %}

    {% if verbose %}
        RESPOND MSG="Extruder heating to print temperature..."
    {% endif %}

    _CONDITIONAL_MOVE_TO_PURGE_BUCKET
    {% if not purge_and_brush_enabled %}
        G0 X{max_x|int / 2} Y{max_y|int / 3} Z50 F{St}
    {% endif %}

    M109 S{EXTRUDER_TEMP}

    # Load intial tool into MMU (if needed)
    {% if klippain_mmu_enabled %}
        _KLIPPAIN_MMU_LOAD_INITIAL_TOOL
    {% endif %}

    {% if purgeclean_servo_enabled %}
        _SERVO_RETRACT ITEM="purge"
    {% endif %}

    {% if verbose %}
        RESPOND MSG="Extruder temperature OK"
    {% endif %}


[gcode_macro _MODULE_PURGE]
gcode:
    # ----- PURGE AND CLEAN ---------------------------------
    # Just put the nozzle ontop of the purge bucket to purge some material. Keep in mind that
    # if the hotend is not at the minimal extrude temperature, it will be heated up before purging
    {% set EXTRUDER_TEMP = printer["gcode_macro PRINT_START"].extruder_temp %}

    {% set purge_and_brush_enabled = printer["gcode_macro _USER_VARIABLES"].purge_and_brush_enabled %}

    {% if purge_and_brush_enabled %}
        PURGE TEMP={EXTRUDER_TEMP}
    {% endif %}


[gcode_macro _MODULE_CLEAN]
gcode:
    # ----- PURGE AND CLEAN ---------------------------------
    # Just put the nozzle on the brush and clean it. Keep in mind that it's better to do
    # it with the hotend at material temperature but you can also do it at any time if needed
    {% set purge_and_brush_enabled = printer["gcode_macro _USER_VARIABLES"].purge_and_brush_enabled %}
    {% set force_homing_before_brush = printer["gcode_macro _USER_VARIABLES"].force_homing_before_brush %}

    {% if purge_and_brush_enabled %}
        {% if force_homing_before_brush %}
            G28 Z # perform homing before going to the brush to avoid a miss or crash
        {% endif %}
        CLEAN_NOZZLE
    {% endif %}


[gcode_macro _MODULE_BED_MESH]
gcode:
    # ----- BED MESH -------------------------------------------
    {% set FL_SIZE = printer["gcode_macro PRINT_START"].fl_size %}
    {% set BED_MESH_PROFILE = printer["gcode_macro PRINT_START"].bed_mesh_profile %}

    {% set verbose = printer["gcode_macro _USER_VARIABLES"].verbose %}
    {% set bed_mesh_enabled = printer["gcode_macro _USER_VARIABLES"].bed_mesh_enabled %}
    {% set status_leds_enabled = printer["gcode_macro _USER_VARIABLES"].status_leds_enabled %}

    {% if bed_mesh_enabled %}
        {% if BED_MESH_PROFILE == "" %}
            {% if verbose %}
                RESPOND MSG="Bed mesh measurement..."
            {% endif %}
            ADAPTIVE_BED_MESH SIZE={FL_SIZE}
        {% else %}
            {% if verbose %}
                RESPOND MSG="Load bed mesh profile : {BED_MESH_PROFILE}"
            {% endif %}
            BED_MESH_PROFILE LOAD={BED_MESH_PROFILE}
        {% endif %}
    {% endif %}
 